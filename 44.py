"""
Solution to Problem 44 of Project Euler.

Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first ten
pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
difference are pentagonal and D = |Pk - Pj| is minimised; what is the value of
D?
"""

from math import sqrt


def pent(n):
    """Return the nth pentagonal number."""
    return n * (3 * n - 1) / 2


def is_pentagonal(p):
    """
    Return True if p is a pentagonal number, else return False.

    We will use the quadratic formula (3n^2 - n)/2 = P(n) and solve for n.
    """
    a = 1.5
    b = -0.5
    c = -p
    d = b**2 - 4 * a * c
    if d < 0:
        return False  # We don't want no irrationals in here
    if d == 0:
        solution = -b / (2 * a)
        return int(solution) == solution and solution >= 1
    else:
        solution = (-b + sqrt(d)) / (2 * a)
        return int(solution) == solution and solution >= 1


def generate_pentagonal_pair(distance):
    """Generate the next pentagonal pair distance away from each other."""
    n = 1
    while True:
        yield (pent(n), pent(n + distance))
        n += 1


def solve(dist=1):
    """
    Return the closest pentagonal pair (a, b) where a+b and b-a are pentagonal.

    boop
    """
    global GENERATOR_DICT
    global NEXT_PAIR_DICT

    def find_best_diff():
        """Find the closest pair from the pairs in NEXT_PAIR_DICT."""
        global NEXT_PAIR_DICT
        bestdifference = None

        # Find the best pair
        for dist in NEXT_PAIR_DICT:
            (a, b) = NEXT_PAIR_DICT[dist]
            if is_pentagonal_pair(a, b):
                if bestdifference is None or b - a < bestdifference:
                    bestdifference = b - a

            # Set up for next cycle of find_best_diff()
            NEXT_PAIR_DICT[dist] = GENERATOR_DICT[dist].next()

        return bestdifference

    def is_pentagonal_pair(a, b):
        """Return if the sum and difference of a and b are both pentagonal."""
        return is_pentagonal(a + b) and is_pentagonal(b - a)

    count = 0
    while True:
        count += 1
        diff = find_best_diff()
        if diff is not None:
            return diff
        else:
            # Set up the next generator to watch for
            if count + 1 not in GENERATOR_DICT:
                GENERATOR_DICT[count + 1] = generate_pentagonal_pair(count + 1)
                NEXT_PAIR_DICT[count + 1] = GENERATOR_DICT[count + 1].next()


# A generator for each distance we've seen and the next one we haven't seen
GENERATOR_DICT = {1: generate_pentagonal_pair(1)}
# The next pair for each distance we've seen plus one higher distance
NEXT_PAIR_DICT = {1: (1, 2)}

print('D = %s' % solve())

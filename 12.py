"""
The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""


def nth_triangle_number(n):
    """
    Returns 1 + 2 + ... + n
    """

    return n * (n + 1) / 2


def number_of_divisors(n):
    """
    Returns the number of divisors n has

    Assumption: n >= 2
    """

    num_divisors = 0

    x = 1

    while x < n / x:

        if n % x == 0:
            # We found a divisor. We add two divisors to our count, to account
            #  for the number that x multiplies by to get n
            num_divisors += 2

        if n % 2 == 0:
            # n is even
            x += 1
        else:
            # n is odd, so we need only check for odd divisors
            x += 2

    if x**2 == n:
        # Account for the square root of n
        num_divisors += 1

    return num_divisors


def first_triangle_number_with_over_n_divisors(n):

    x = 1
    while True:
        t = nth_triangle_number(x)
        if number_of_divisors(t) > n:
            return t
        x += 1


print(first_triangle_number_with_over_n_divisors(5))
print(first_triangle_number_with_over_n_divisors(500))
